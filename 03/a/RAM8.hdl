// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    
    // loadビットが0なら8出力全部0, loadビットが1なら選択されたビットだけ1でほかは0
    DMux8Way(in=load, sel=address, a=la, b=lb, c=lc, d=ld, e=le, f=lf, g=lg, h=lh);

    // 0. loadビット0の場合、DMux8Wayの出力は00000000。
    // loadビットがa~hが全て0のためどのレジスタも更新されない。
    // 出力はout(t) = Register[n]のout(t-1)

    // 1. loadビット1の場合、DMux8Wayの出力はa~hのどれか1ビットが1になる。
    // 制御ビットaddressが000の場合、10000000@
    // 1つ目のレジスタのloadビットが1であるためレジスタの値が更新される。
    // 出力はout(t) = Register[n]のout(t-1)
    Register(in=in, load=la, out=aout);
    Register(in=in, load=lb, out=bout);
    Register(in=in, load=lc, out=cout);
    Register(in=in, load=ld, out=dout);
    Register(in=in, load=le, out=eout);
    Register(in=in, load=lf, out=fout);
    Register(in=in, load=lg, out=gout);
    Register(in=in, load=lh, out=hout);

    Mux8Way16(a=aout, b=bout, c=cout, d=dout, e=eout, f=fout, g=gout, h=hout, sel=address, out=out);
}